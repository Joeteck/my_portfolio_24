import * as THREE from 'three';
import React, { Suspense, useRef, useEffect } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { Html, Environment, useGLTF, ContactShadows, OrbitControls } from '@react-three/drei';
import HeroPage from './HeroPage';

function Model(props) {
    const group = useRef();
    // Load model
    const { nodes, materials } = useGLTF('/3Dassets/mac-draco.glb');
    
    // UseEffect to modify material colors
    useEffect(() => {
        // Modify the materials to have a black-green color scheme
        materials.aluminium.color = new THREE.Color('black');
        materials['matte.001'].color = new THREE.Color('black');
        materials.trackpad.color = new THREE.Color('black');
        materials.touchbar.color = new THREE.Color('#03170f');

         // Check for any other materials that could be white and change them
        if (materials.anotherMaterial) {
            materials.anotherMaterial.color = new THREE.Color('black');
        }
        
        // Optionally, adjust the roughness or metalness properties to make it look more metallic or matte
        materials.aluminium.roughness = 0.2;
        materials['matte.001'].roughness = 0.4;
        materials.trackpad.roughness = 0.3;
        materials.touchbar.roughness = 0.3;
        
    }, [materials]);

    // Make it float
    useFrame((state) => {
        const t = state.clock.getElapsedTime();
        group.current.rotation.x = THREE.MathUtils.lerp(group.current.rotation.x, Math.cos(t / 2) / 20 + 0.25, 0.1);
        group.current.rotation.y = THREE.MathUtils.lerp(group.current.rotation.y, Math.sin(t / 4) / 20, 0.1);
        group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, Math.sin(t / 8) / 20, 0.1);
        group.current.position.y = THREE.MathUtils.lerp(group.current.position.y, (-2 + Math.sin(t / 2)) / 2, 0.1);
    });

    // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
    return (
        <group ref={group} {...props} dispose={null}>
            <group rotation-x={-0.425} position={[0, -0.04, 0.41]}>
                <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
                    <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
                    <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
                    <mesh geometry={nodes['Cube008_2'].geometry}>
                        <Html className="w-[336px] h-[220px] overflow-y-auto rounded p-0 bg-primary-green custom-scrollbar"  rotation-x={-Math.PI / 2} position={[-0.12, 0.05, -0.3]} transform occlude>
                        <div className="w-[400px] h-[220px] rounded p-2 scale-100 origin-top-left bg-primary-green custom-scrollbar" onPointerDown={(e) => e.stopPropagation()}>
                                <HeroPage />
                            </div>
                        </Html>
                    </mesh>
                </group>
            </group>
            <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
            <group position={[0, -0.1, 3.39]}>
                <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
                <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
            </group>
            <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
        </group>
    );
}

export default function App() {
    return (
        <Canvas camera={{ position: [-5, 0, -15], fov: 55 }}>
            <pointLight position={[10, 10, 10]} intensity={1.5} />
            <Suspense fallback={null}>
                <group rotation={[0, Math.PI, 0]} position={[0, 1, 0]}>
                    <Model />
                </group>
                <Environment preset="city" />
            </Suspense>
            <ContactShadows position={[0, -4.5, 0]} scale={20} blur={2} far={4.5} />
            <OrbitControls enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2.2} maxPolarAngle={Math.PI / 2.2} />
        </Canvas>
    );
}
